version: 2
jobs:
  app-unit:
    docker:
      - image: circleci/node:8.11.2
        environment:
          VUE_APP_DOMAIN_DEV: api.athena.$ATHENA_BASE_HOSTNAME
          VUE_APP_NAME: Athena
          VUE_APP_ENV: development
    steps:
      - checkout
      - run:
          name: export additional env vars
          command: |
            echo "export VUE_APP_DOMAIN_DEV=api.athena.$ATHENA_BASE_HOSTNAME" >> $BASH_ENV
      - restore_cache:
          keys:
            - v1-deps-{{ .Branch }}-{{ checksum "package.json" }}
            - v1-deps-{{ .Branch }}
            - v1-deps
      - run:
          name: install dependecies
          command: yarn install --frozen-lockfile
      - save_cache:
          key: v1-deps-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ~/.cache
      - run:
          name: run jest tests
          command: npm run test:unit
  app-integ:
    docker:
      - image: cypress/base:8
        environment:
          VUE_APP_NAME: Athena
          VUE_APP_ENV: development
          TERM: xterm
    steps:
      - checkout
      - run:
          name: export additional env vars
          command: |
            echo "export VUE_APP_DOMAIN_DEV=api.athena.$ATHENA_BASE_HOSTNAME" >> $BASH_ENV
      - restore_cache:
          keys:
            - v1-deps-{{ .Branch }}-{{ checksum "package.json" }}
            - v1-deps-{{ .Branch }}
            - v1-deps
      - run:
          name: install dependecies
          command: yarn install --frozen-lockfile
      - save_cache:
          key: v1-deps-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ~/.cache
      - run:
          name: run cypress tests
          command: |
            yarn serve &
            $(yarn bin)/wait-on http://localhost:8080/
            $(yarn bin)/cypress run

  build-prod:
    docker:
      - image: circleci/node:8.11.2
        user: root
        environment:
          VUE_APP_NAME: Athena
          VUE_APP_ENV: production
    steps:
      - checkout
      - run:
          name: export additional env vars
          command: |
            echo "export VUE_APP_DOMAIN_PROD=api.athena.$ATHENA_BASE_HOSTNAME" >> $BASH_ENV
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: install docker
          command: |
            VER="18.09.1"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv -f /tmp/docker/* /usr/bin
      - run:
          name: install compose
          command: |
            VER="1.23.2"
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: create .env file for compose
          command: |
            echo "VUE_APP_ENV=$VUE_APP_ENV" >> .env
            echo "VUE_APP_NAME=$VUE_APP_NAME" >> .env
            echo "VUE_APP_DOMAIN_PROD=$VUE_APP_DOMAIN_PROD" >> .env
      - run:
          name: build image and push to registry as prod image
          command: |
            docker-compose build
            docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
            docker push ippolab/athena-frontend
  deploy-prod:
    machine:
      enabled: true
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "47:17:34:6e:e2:15:27:19:52:7a:af:bd:93:ce:50:32"
      - run:
          name: connect to droplet and update instance
          command: |
            ssh $SSH_USER@$SSH_HOST "cd athena && export HOSTNAME=$ATHENA_BASE_HOSTNAME && docker-compose stop front && docker-compose rm --force front && docker-compose pull front && docker-compose up -d"
workflows:
  version: 2
  main:
    jobs:
      - app-unit
      - app-integ
      - build-prod:
          requires:
            - app-unit
            - app-integ
          filters:
            branches:
              only: master
      - deploy-prod:
          requires:
            - build-prod
          filters:
            branches:
              only: master
